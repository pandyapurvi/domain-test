{"version":3,"sources":["components/Card.js","components/App.js","serviceWorker.js","index.js"],"names":["Card","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","givenName","surname","email","phone","houseName","street","suburb","postcode","country","getGivenName","bind","assertThisInitialized","getSurname","getEmail","getPhone","getHouseName","getStreet","getSuburb","getState","getPostcode","getCountry","event","setState","target","value","react_default","a","createElement","className","Form","Row","Col","Label","Control","onChange","href","src","alt","type","required","Component","App","components_Card","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAkOeA,qBA7Nb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACCQ,MAAQ,CACXC,UAAW,GACXC,QAAS,GACTC,MAAO,GACPC,MAAO,GACPC,UAAU,GACVC,OAAO,GACPC,OAAO,GACPP,MAAM,GACNQ,SAAS,GACTC,QAAQ,IAEVhB,EAAKiB,aAAejB,EAAKiB,aAAaC,KAAlBjB,OAAAkB,EAAA,EAAAlB,CAAAD,IACpBA,EAAKoB,WAAapB,EAAKoB,WAAWF,KAAhBjB,OAAAkB,EAAA,EAAAlB,CAAAD,IAClBA,EAAKqB,SAAWrB,EAAKqB,SAASH,KAAdjB,OAAAkB,EAAA,EAAAlB,CAAAD,IAChBA,EAAKsB,SAAWtB,EAAKsB,SAASJ,KAAdjB,OAAAkB,EAAA,EAAAlB,CAAAD,IAChBA,EAAKuB,aAAevB,EAAKuB,aAAaL,KAAlBjB,OAAAkB,EAAA,EAAAlB,CAAAD,IACpBA,EAAKwB,UAAYxB,EAAKwB,UAAUN,KAAfjB,OAAAkB,EAAA,EAAAlB,CAAAD,IACjBA,EAAKyB,UAAYzB,EAAKyB,UAAUP,KAAfjB,OAAAkB,EAAA,EAAAlB,CAAAD,IACjBA,EAAK0B,SAAW1B,EAAK0B,SAASR,KAAdjB,OAAAkB,EAAA,EAAAlB,CAAAD,IAChBA,EAAK2B,YAAc3B,EAAK2B,YAAYT,KAAjBjB,OAAAkB,EAAA,EAAAlB,CAAAD,IACnBA,EAAK4B,WAAa5B,EAAK4B,WAAWV,KAAhBjB,OAAAkB,EAAA,EAAAlB,CAAAD,IAvBHA,4EA0BN6B,GACX1B,KAAK2B,SAAS,CACZtB,UAAWqB,EAAME,OAAOC,2CAKjBH,GACT1B,KAAK2B,SAAS,CACZrB,QAASoB,EAAME,OAAOC,yCAIjBH,GACP1B,KAAK2B,SAAS,CACZpB,MAAOmB,EAAME,OAAOC,yCAIfH,GACP1B,KAAK2B,SAAS,CACZnB,MAAMkB,EAAME,OAAOC,6CAIVH,GACX1B,KAAK2B,SAAS,CACZlB,UAAWiB,EAAME,OAAOC,0CAIlBH,GACR1B,KAAK2B,SAAS,CACZjB,OAAQgB,EAAME,OAAOC,0CAIfH,GACR1B,KAAK2B,SAAS,CACZhB,OAAQe,EAAME,OAAOC,MAAQ,uCAIxBH,GACP1B,KAAK2B,SAAS,CACZvB,MAAOsB,EAAME,OAAOC,4CAIZH,GACV1B,KAAK2B,SAAS,CACZf,SAAUc,EAAME,OAAOC,2CAIdH,GACT1B,KAAK2B,SAAS,CACZd,QAASa,EAAME,OAAOC,yCAM1B,OACEC,EAAAC,EAAAC,cAAA,WAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,WAEJF,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACE,EAAA,EAAKG,MAAN,CAAYJ,UAAU,QAAtB,cACAH,EAAAC,EAAAC,cAACE,EAAA,EAAKI,QAAN,CAAcC,SAAUvC,KAAKc,aAAcmB,UAAU,mBAEvDH,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACE,EAAA,EAAKG,MAAN,CAAYJ,UAAU,QAAtB,WACAH,EAAAC,EAAAC,cAACE,EAAA,EAAKI,QAAN,CAAcC,SAAUvC,KAAKiB,WAAYgB,UAAU,oBAGvDH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACE,EAAA,EAAKG,MAAN,CAAYJ,UAAU,QAAtB,SACAH,EAAAC,EAAAC,cAACE,EAAA,EAAKI,QAAN,CAAcC,SAAUvC,KAAKkB,SAAUe,UAAU,mBAEnDH,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACE,EAAA,EAAKG,MAAN,CAAYJ,UAAU,QAAtB,SACAH,EAAAC,EAAAC,cAACE,EAAA,EAAKI,QAAN,CAAcC,SAAUvC,KAAKmB,SAAUc,UAAU,qBAIzDH,EAAAC,EAAAC,cAAA,WAASF,EAAAC,EAAAC,cAAA,WAASF,EAAAC,EAAAC,cAAA,WAElBF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACE,EAAA,EAAKG,MAAN,CAAYJ,UAAU,QAAtB,mBACAH,EAAAC,EAAAC,cAACE,EAAA,EAAKI,QAAN,CAAcC,SAAUvC,KAAKoB,aAAaa,UAAU,mBAEtDH,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACE,EAAA,EAAKG,MAAN,CAAYJ,UAAU,QAAtB,UACAH,EAAAC,EAAAC,cAACE,EAAA,EAAKI,QAAN,CAAcC,SAAUvC,KAAKqB,UAAUY,UAAU,oBAE/CH,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACE,EAAA,EAAKG,MAAN,CAAYJ,UAAU,QAAtB,UACAH,EAAAC,EAAAC,cAACE,EAAA,EAAKI,QAAN,CAAcC,SAAUvC,KAAKsB,UAAWW,UAAU,mBAEpDH,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACE,EAAA,EAAKG,MAAN,CAAYJ,UAAU,QAAtB,SACAH,EAAAC,EAAAC,cAACE,EAAA,EAAKI,QAAN,CAAcC,SAAUvC,KAAKuB,SAAUU,UAAU,oBAE/CH,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACE,EAAA,EAAKG,MAAN,CAAYJ,UAAU,QAAtB,YACAH,EAAAC,EAAAC,cAACE,EAAA,EAAKI,QAAN,CAAcC,SAAUvC,KAAKwB,YAAaS,UAAU,mBAEtDH,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACE,EAAA,EAAKG,MAAN,CAAYJ,UAAU,QAAtB,WACAH,EAAAC,EAAAC,cAACE,EAAA,EAAKI,QAAN,CAAcC,SAAUvC,KAAKyB,WAAYQ,UAAU,oBAEjDH,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAlB,kBAEFH,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAlB,qBAONH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,4BAGJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,KAA8BjC,KAAKI,MAAMC,UAAzC,IAAqDL,KAAKI,MAAME,UAGlEwB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,KAAGJ,OAAO,SAASY,KAAK,4GACxBV,EAAAC,EAAAC,cAAA,OAAKS,IAAI,2GAA2GC,IAAI,mBAIxHZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAGfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAChBH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,SAAmCH,EAAAC,EAAAC,cAAA,SAAOW,KAAK,OAAQC,SAAS,OAAOf,MAAO7B,KAAKI,MAAMG,MAAO0B,UAAU,WACpGH,EAAAC,EAAAC,cAAA,WACRF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,QAAOC,UAAU,QAAjB,SAAoCH,EAAAC,EAAAC,cAAA,SAAOW,KAAK,OAAOC,SAAS,OAAOf,MAAO7B,KAAKI,MAAMI,SACnFsB,EAAAC,EAAAC,cAAA,WACRF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,QAAOC,UAAU,QAAjB,YAAuCH,EAAAC,EAAAC,cAAA,SAAOW,KAAK,OAAQC,SAAS,OAAOf,MAAO7B,KAAKI,MAAMK,UAAY,IAAMT,KAAKI,MAAMM,UACpHoB,EAAAC,EAAAC,cAAA,WACRF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,QAAOC,UAAU,QAAjB,QAAqCH,EAAAC,EAAAC,cAAA,SAAOW,KAAK,OAAOC,SAAS,OAAOf,MAAO7B,KAAKI,MAAMO,OAAS,KAAOX,KAAKI,MAAMA,SAC/G0B,EAAAC,EAAAC,cAAA,WAEZF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,QACfH,EAAAC,EAAAC,cAAA,wBAAqBF,EAAAC,EAAAC,cAAA,SAAOW,KAAK,OAAOC,SAAS,OAAOf,MAAO7B,KAAKI,MAAMQ,SAAUqB,UAAU,gBACxFH,EAAAC,EAAAC,cAAA,WAERF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,uBAAqBF,EAAAC,EAAAC,cAAA,SAAOW,KAAK,OAAOC,SAAS,OAAOf,MAAO7B,KAAKI,MAAMS,QAASoB,UAAU,gBACvFH,EAAAC,EAAAC,cAAA,YACNF,EAAAC,EAAAC,cAAA,uBApNSa,cCSJC,MARf,WACE,OACEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACe,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d0f03af7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Form, Col, Row } from 'react-bootstrap';\nimport './../App.css';\n\nclass Card extends Component {\n  constructor(props) {\n    super(props);\n      this.state = {\n        givenName: \"\",\n        surname: \"\",\n        email: \"\",\n        phone: \"\",\n        houseName:\"\",\n        street:\"\",\n        suburb:\"\",\n        state:\"\",\n        postcode:\"\",\n        country:\"\"\n      }\n      this.getGivenName = this.getGivenName.bind(this);\n      this.getSurname = this.getSurname.bind(this);\n      this.getEmail = this.getEmail.bind(this);\n      this.getPhone = this.getPhone.bind(this);\n      this.getHouseName = this.getHouseName.bind(this);\n      this.getStreet = this.getStreet.bind(this);\n      this.getSuburb = this.getSuburb.bind(this);\n      this.getState = this.getState.bind(this);\n      this.getPostcode = this.getPostcode.bind(this);\n      this.getCountry = this.getCountry.bind(this);\n  }\n  //This code will take input\n  getGivenName(event) {\n    this.setState({\n      givenName: event.target.value\n      });\n      //console.log(event.target.value);\n    }\n\n  getSurname(event) {\n    this.setState({\n      surname: event.target.value\n      });\n    }\n\n  getEmail(event) {\n    this.setState({\n      email: event.target.value\n        });\n    }\n\n  getPhone(event) {\n    this.setState({\n      phone:event.target.value\n      });\n    }\n\n  getHouseName(event) {\n    this.setState({\n      houseName: event.target.value\n        });\n    }\n\n  getStreet(event) {\n    this.setState({\n      street: event.target.value\n        });\n    }\n\n  getSuburb(event) {\n    this.setState({\n      suburb: event.target.value + \",\"\n        });\n    }\n\n  getState(event) {\n    this.setState({\n      state: event.target.value\n        });\n    }\n\n  getPostcode(event) {\n    this.setState({\n      postcode: event.target.value\n        });\n    }\n\n    getCountry(event) {\n      this.setState({\n        country: event.target.value\n          });\n    }\n\n  render() {\n\n    return (\n      <div>\n\n    <div className=\"card-container\">\n      <div className=\"card-content\">\n        <h1>hCard Builder</h1>\n        <h6>PERSONAL DETAILS</h6>\n        <hr></hr>\n\n    <Form>\n      <Row>\n        <Col>\n          <Form.Label className=\"name\">GIVEN NAME</Form.Label>\n          <Form.Control onChange={this.getGivenName} className=\"builder-input\" />\n        </Col>\n        <Col>\n          <Form.Label className=\"name\">SURNAME</Form.Label>\n          <Form.Control onChange={this.getSurname} className=\"builder-input\"  />\n        </Col>\n      </Row>\n      <br></br>\n      <Row>\n        <Col>\n          <Form.Label className=\"name\">EMAIL</Form.Label>\n          <Form.Control onChange={this.getEmail} className=\"builder-input\" />\n        </Col>\n        <Col>\n          <Form.Label className=\"name\">PHONE</Form.Label>\n          <Form.Control onChange={this.getPhone} className=\"builder-input\" />\n        </Col>\n      </Row>\n    </Form>\n  <br></br><br></br><br></br>\n\n  <h6>ADDRESS</h6>\n  <hr></hr>\n\n  <Form>\n    <Row>\n      <Col>\n        <Form.Label className=\"name\">HOUSE NAME OR #</Form.Label>\n        <Form.Control onChange={this.getHouseName}className=\"builder-input\" />\n      </Col>\n      <Col>\n        <Form.Label className=\"name\">STREET</Form.Label>\n        <Form.Control onChange={this.getStreet}className=\"builder-input\" />\n      </Col>\n    </Row><br></br>\n    <Row>\n      <Col>\n        <Form.Label className=\"name\">SUBURB</Form.Label>\n        <Form.Control onChange={this.getSuburb} className=\"builder-input\"/>\n      </Col>\n      <Col>\n        <Form.Label className=\"name\">STATE</Form.Label>\n        <Form.Control onChange={this.getState} className=\"builder-input\" />\n      </Col>\n    </Row><br></br>\n    <Row>\n      <Col>\n        <Form.Label className=\"name\">POSTCODE</Form.Label>\n        <Form.Control onChange={this.getPostcode} className=\"builder-input\"/>\n      </Col>\n      <Col>\n        <Form.Label className=\"name\">COUNTRY</Form.Label>\n        <Form.Control onChange={this.getCountry} className=\"builder-input\" />\n      </Col>\n    </Row><br></br>\n    <Row>\n      <Col>\n        <button className=\"button avatar\">Upload Avatar</button>\n      </Col>\n      <Col>\n        <button className=\"button create\">Create hCard</button>\n      </Col>\n    </Row>\n  </Form>\n    </div>\n  </div>\n\n  <div className=\"preview-container\">\n    <div className=\"header\">\n        <h4>HCARD PREVIEW</h4>\n    </div>\n\n    <div className=\"preview-card-header\">\n    <div className=\"header-container\">\n      <p className=\"header-name\">  {this.state.givenName} {this.state.surname}</p>\n      </div>\n\n    <div className=\"photo\">\n      <a target=\"_blank\" href=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTfKITLITj_C8c8HtXkDY5ltJu3xzj1kSn93BncU3aZR5yCtdlV\">\n      <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTfKITLITj_C8c8HtXkDY5ltJu3xzj1kSn93BncU3aZR5yCtdlV\" alt=\"purvi image\"/></a>\n      </div>\n      </div>\n\n      <div className=\"preview-card\">\n\n\n      <div className=\"preview-content\">\n        <form className=\"form-style-4\">\n        <label >\n          <span className=\"span\">EMAIL</span><input type=\"text\"  required=\"true\" value={this.state.email} className=\"email\" />\n        </label><hr></hr>\n        <label>\n          <span  className=\"span\">PHONE</span><input type=\"text\" required=\"true\" value={this.state.phone}/>\n        </label><hr></hr>\n        <label >\n          <span  className=\"span\">ADDRESS </span><input type=\"text\"  required=\"true\" value={this.state.houseName + \" \" + this.state.street}/>\n        </label><hr></hr>\n        <label>\n          <span  className=\"span\">&nbsp;</span><input type=\"text\" required=\"true\" value={this.state.suburb + \"  \" + this.state.state}/>\n        </label><hr></hr>\n\n    <div className=\"grid-container\">\n        <label className=\"item\">\n          <span>POSTCODE</span><input type=\"text\" required=\"true\" value={this.state.postcode} className=\"form-input\"/>\n        </label><hr></hr>\n\n        <label >\n          <span >COUNTRY</span><input type=\"text\" required=\"true\" value={this.state.country} className=\"form-input\"/>\n        </label><hr></hr>\n    </div><hr></hr>\n  </form>\n  </div>\n  </div>\n</div>\n</div>\n    )\n  }\n};\n\nexport default Card;\n","import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\nimport Card from './Card.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Card />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}